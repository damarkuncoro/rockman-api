### PUT Update User by ID - Complete Update
# Update user dengan data lengkap
PUT http://localhost:3000/api/v1/users/1
Content-Type: application/json

{
  "name": "John Doe Updated",
  "email": "john.updated@example.com",
  "age": 31,
  "role": "admin"
}

###

### PUT Update User by ID - Partial Update
# Update hanya beberapa field
PUT http://localhost:3000/api/v1/users/1
Content-Type: application/json

{
  "name": "John Smith",
  "age": 32
}

###

### PUT Update User by ID - Single Field Update
# Update hanya satu field
PUT http://localhost:3000/api/v1/users/1
Content-Type: application/json

{
  "role": "moderator"
}

###

### PUT Update User by ID - Complex Data Update
# Update dengan data yang kompleks
PUT http://localhost:3000/api/v1/users/1
Content-Type: application/json

{
  "name": "John Complex",
  "email": "john.complex@example.com",
  "age": 35,
  "role": "senior_admin",
  "profile": {
    "bio": "Senior administrator with 10+ years experience",
    "avatar": "https://example.com/avatars/john.jpg",
    "socialLinks": {
      "linkedin": "https://linkedin.com/in/john-complex",
      "twitter": "@johncomplex"
    }
  },
  "preferences": {
    "theme": "dark",
    "language": "en",
    "timezone": "UTC",
    "notifications": {
      "email": true,
      "push": false,
      "sms": true
    }
  }
}

###

### PUT Update User by ID - Non-existent ID
# Test error handling untuk ID yang tidak ada
PUT http://localhost:3000/api/v1/users/99999
Content-Type: application/json

{
  "name": "Non Existent User",
  "email": "nonexistent@example.com"
}

###

### PUT Update User by ID - Invalid ID Format
# Test error handling untuk format ID yang tidak valid
PUT http://localhost:3000/api/v1/users/invalid-id
Content-Type: application/json

{
  "name": "Invalid ID User",
  "email": "invalid@example.com"
}

###

### PUT Update User by ID - Invalid Email
# Test error handling untuk email tidak valid
PUT http://localhost:3000/api/v1/users/1
Content-Type: application/json

{
  "name": "Invalid Email User",
  "email": "invalid-email-format"
}

###

### PUT Update User by ID - Duplicate Email
# Test error handling untuk email yang sudah digunakan user lain
PUT http://localhost:3000/api/v1/users/1
Content-Type: application/json

{
  "name": "Duplicate Email User",
  "email": "existing@example.com"
}

###

### PUT Update User by ID - Empty Body
# Test error handling untuk body kosong
PUT http://localhost:3000/api/v1/users/1
Content-Type: application/json

###

### PUT Update User by ID - Invalid JSON
# Test error handling untuk JSON yang tidak valid
PUT http://localhost:3000/api/v1/users/1
Content-Type: application/json

{
  "name": "Invalid JSON User",
  "email": "invalid.json@example.com"
  "age": 25
}

###

### PUT Update User by ID - Negative Age
# Test error handling untuk age negatif
PUT http://localhost:3000/api/v1/users/1
Content-Type: application/json

{
  "name": "Negative Age User",
  "email": "negative@example.com",
  "age": -5
}

###

### PUT Update User by ID - UUID ID
# Test dengan UUID format ID
PUT http://localhost:3000/api/v1/users/550e8400-e29b-41d4-a716-446655440000
Content-Type: application/json

{
  "name": "UUID User Updated",
  "email": "uuid.updated@example.com",
  "age": 28
}

###

### PUT Update User by ID - Timestamp Update
# Update dengan timestamp fields
PUT http://localhost:3000/api/v1/users/1
Content-Type: application/json

{
  "name": "Timestamp User",
  "email": "timestamp@example.com",
  "lastLogin": "2024-01-15T10:30:00Z",
  "updatedAt": "2024-01-15T10:30:00Z"
}

###

### PUT Update User by ID - Concurrent Update Test
# Test concurrent updates
PUT http://localhost:3000/api/v1/users/1
Content-Type: application/json
X-Test-Concurrent: true

{
  "name": "Concurrent Update User",
  "email": "concurrent@example.com",
  "version": 2
}

###

### PUT Update User by ID - With Custom Headers
# Test dengan custom headers
PUT http://localhost:3000/api/v1/users/1
Content-Type: application/json
Accept: application/json
User-Agent: HTTP-Client-Test/1.0
X-Request-ID: test-put-user-by-id-001
Authorization: Bearer user-token

{
  "name": "Header Test User Updated",
  "email": "header.updated@example.com",
  "age": 29
}

###

### PUT Update User by ID - Optimistic Locking
# Test optimistic locking dengan version
PUT http://localhost:3000/api/v1/users/1
Content-Type: application/json
If-Match: "version-123"

{
  "name": "Optimistic Lock User",
  "email": "optimistic@example.com",
  "version": 124
}

###

### PUT Update User by ID - Conditional Update
# Test conditional update
PUT http://localhost:3000/api/v1/users/1
Content-Type: application/json
If-Unmodified-Since: Mon, 15 Jan 2024 10:00:00 GMT

{
  "name": "Conditional Update User",
  "email": "conditional@example.com"
}

###

### PUT Update User by ID - Large Payload
# Test dengan payload yang besar
PUT http://localhost:3000/api/v1/users/1
Content-Type: application/json

{
  "name": "Large Payload User Updated",
  "email": "large.updated@example.com",
  "age": 40,
  "role": "enterprise_admin",
  "bio": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
  "metadata": {
    "department": "Engineering",
    "team": "Full Stack Development",
    "skills": ["JavaScript", "TypeScript", "Node.js", "React", "Next.js", "PostgreSQL", "Docker", "AWS"],
    "certifications": [
      {
        "name": "AWS Solutions Architect",
        "issuer": "Amazon Web Services",
        "date": "2024-01-01",
        "level": "Professional"
      },
      {
        "name": "Google Cloud Professional Developer",
        "issuer": "Google Cloud",
        "date": "2023-12-15",
        "level": "Professional"
      }
    ],
    "projects": [
      {
        "name": "E-commerce Platform Redesign",
        "role": "Technical Lead",
        "duration": "8 months",
        "technologies": ["Next.js", "PostgreSQL", "Redis", "Docker"]
      },
      {
        "name": "Microservices Migration",
        "role": "Senior Developer",
        "duration": "6 months",
        "technologies": ["Node.js", "Kubernetes", "MongoDB"]
      }
    ]
  }
}

###